version: 2.1

parameters:
  account-id:
    type: string
    default: "992382483259"
  aws-oidc-role:
    type: string
    default: arn:aws:iam::992382483259:role/fieldeng_circleci_labs_oidc_oauth_role
  use-aws-orbs:
    type: boolean
    default: true

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecs: circleci/aws-ecs@4.0.0
  aws-ecr: circleci/aws-ecr@9.2.0

commands:
  aws-auth-setup:
    steps:
       - aws-cli/setup:
            region: us-east-1
            role_arn: << pipeline.parameters.aws-oidc-role >>
            role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"

  manual-push-to-ecr:
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            docker build -t $ECS_DEMO_IMAGE .
      - run:
          name: Run Docker container on port 5000 in detached mode...
          command: |
            echo "Running container in detached mode..."
            docker run -d -p $CONTAINER_PORT:$CONTAINER_PORT -e ENV_VAR1=$CIRCLE_USERNAME -e ENV_VAR2=$CIRCLE_BUILD_NUM $ECS_DEMO_IMAGE
      - run: 
          name: Perform Health Check
          command: |
             if curl http://localhost:$CONTAINER_PORT; then
                     printf "\n\nHealth Check was successful.."
             else
                     echo "Request failed. Check if docker container is healthy..."
                     exit 1
             fi
      - run: docker ps
      - run: docker images
      - run:
          when: on_success
          name: push to ECR if build is successful
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_IMAGE_REPO
            docker tag $ECS_DEMO_IMAGE:latest $ECR_IMAGE_REPO/$ECS_DEMO_IMAGE:latest
            echo -e "\033[0;32mReady to push image to ECR....\033[0m"
            docker push $ECR_IMAGE_REPO/$ECS_DEMO_IMAGE:latest
      - run:
          name: push to ECR if build is successful
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_IMAGE_REPO
            docker tag $ECS_DEMO_IMAGE:latest $ECR_IMAGE_REPO/$ECS_DEMO_IMAGE:latest
            echo -e "\033[0;32mReady to push image to ECR....\033[0m"
            docker push $ECR_IMAGE_REPO/$ECS_DEMO_IMAGE:latest


executors:
  ubuntu-default:
    machine:
      image: ubuntu-2404:current
      docker_layer_caching: true
    resource_class: medium
    environment:
      DOCKER_BULDKIT: "1"
      CONTAINER_PORT: 5000

  tf-docker:
    docker:
      - image: hashicorp/terraform:1.8.3
    resource_class: small

jobs: 
  generate-task-definition-config:
    executor: tf-docker
    steps:
      - checkout
      - aws-cli/setup:
          region: us-east-1
          profile_name: circleci-ecs-deployments
          role_arn: << pipeline.parameters.aws-oidc-role >>
          role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
      - run:
          name: Run terraform plan
          command: |
               cd terraform
               terraform init -input=false
               terraform plan -out tfapply -var="env_var1=$CIRCLE_BUILD_NUM" -var="env_var2=$CIRCLE_SHA1"
               terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy-ecs:
    executor: ubuntu-default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-ecr/build_and_push_image:
          account_id: << pipeline.parameters.account-id >>
          auth:
            - aws-cli/setup:
                region: us-east-1
                role_arn: << pipeline.parameters.aws-oidc-role >> 
                role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
                profile_name: oidc
          no_output_timeout: 20m
          profile_name: oidc
          repo: ecs-demo-repo
      - aws-auth-setup
      - aws-ecs/update_task_definition_from_json:
          profile_name: oidc
          task_definition_json: my-task-definition.json
      - aws-ecs/update_service:
          cluster: ecs-demo-cluster
          family: ecs_demo_task
          service_name: ecs_demo_service
          skip_task_definition_registration: true
          force_new_deployment: true
          profile_name: oidc

workflows:
  ecs:
    when: 
      and: 
       - equal: [true, << pipeline.parameters.use-aws-orbs >>]
    jobs:
      - generate-task-definition-config
      - deploy-ecs:
           requires:
              - generate-task-definition-config
