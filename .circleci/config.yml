version: 2.1

parameters:
  ecs-cluster-name:
    type: string
    default: "ecs-demo-cluster"
  ecs-family-name:
    type: string
    default: "ecs_demo_task"
  ecs-service-name:
    type: string
    default: "ecs_demo_service"
  account-id:
    type: string
    default: "992382483259"
  aws-default-region:
    type: string
    default: "us-east-1"
  aws-oidc-role:
    type: string
    default: arn:aws:iam::992382483259:role/fieldeng_circleci_labs_oidc_oauth_role
  aws-oidc-profile-name:
    type: string
    default: "CircleCI-OIDC-User"
  use-aws-orbs:
    type: boolean
    default: true

orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecs: circleci/aws-ecs@4.0.0
  aws-ecr: circleci/aws-ecr@9.0.1

commands:
  aws-auth-setup:
    steps:
       - aws-cli/setup:
            region: << pipeline.parameters.aws-default-region >>
            role_arn: << pipeline.parameters.aws-oidc-role >>
            role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
            profile_name: << pipeline.parameters.aws-oidc-profile-name >>

  build-image-test:
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            docker build -t ecs-demo-image .
      - run:
          name: Run Docker container on port 5000 in detached mode...
          command: |
            echo "Running container in detached mode..."
            docker run -d -p $CONTAINER_PORT:$CONTAINER_PORT -e ENV_VAR1=$CIRCLE_USERNAME -e ENV_VAR2=$CIRCLE_BUILD_NUM ecs-demo-image
      - run: 
          name: Perform Health Check
          command: |
             if curl http://localhost:$CONTAINER_PORT; then
                     printf "\n\nHealth Check was successful.."
             else
                     echo "Request failed. Check if docker container is healthy..."
                     exit 1
             fi
      - run: docker ps
      - run: docker images
      #- run:
      #    when: on_success
      #    name: push to ECR if build is successful
      #    command: |
      #      aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_IMAGE_REPO
      #      docker tag ecs-demo-image:latest $ECR_IMAGE_REPO/ecs-demo-image:latest
      #      echo -e "\033[0;32mReady to push image to ECR....\033[0m"
      #      docker push $ECR_IMAGE_REPO/ecs-demo-image:latest


executors:
  ubuntu-default:
    machine:
      image: ubuntu-2404:current
      docker_layer_caching: true
    resource_class: medium
    environment:
      DOCKER_BULDKIT: "1"
      CONTAINER_PORT: 5000
      AWS_DEFAULT_REGION: << pipeline.parameters.aws-default-region >>

  tf-docker:
    docker:
      - image: hashicorp/terraform:1.8.3
    resource_class: small
    environment: 
      AWS_DEFAULT_REGION: << pipeline.parameters.aws-default-region >>

jobs: 
  build-image-test:
    executor: ubuntu-default
    steps:
      - checkout
      - build-image-test

  build-and-push-image:
    executor: ubuntu-default
    steps:
      - checkout
      - aws-ecr/build_and_push_image:
          account_id: << pipeline.parameters.account-id >>
          auth:
            - aws-cli/setup:
                region: << pipeline.parameters.aws-default-region >>
                role_arn: << pipeline.parameters.aws-oidc-role >> 
                role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
                profile_name: << pipeline.parameters.aws-oidc-profile-name >> 
          no_output_timeout: 20m
          profile_name: << pipeline.parameters.aws-oidc-profile-name >>
          repo: ecs-demo-repo

  generate-task-definition-config:
    executor: tf-docker
    steps:
      - checkout
      - aws-cli/setup:
          region: << pipeline.parameters.aws-default-region >>
          profile_name: << pipeline.parameters.aws-oidc-role >> 
          role_arn: << pipeline.parameters.aws-oidc-role >>
          role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
      - run:
          name: Run terraform plan
          command: |
               cd terraform
               terraform init -input=false
               terraform plan -out tfapply -var="env_var1=$CIRCLE_BUILD_NUM" -var="env_var2=$CIRCLE_SHA1"
               terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy-ecs:
    docker:
      - image: cimg/python:3.10.4
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - aws-auth-setup
      - aws-ecs/update_task_definition_from_json:
          profile_name: << pipeline.parameters.aws-oidc-profile-name >> 
          task_definition_json: terraform/my-task-definition.json
      - aws-ecs/update_service:
          cluster: << pipeline.parameters.ecs-cluster-name >> 
          family: << pipeline.parameters.ecs-family-name >> 
          service_name: << pipeline.parameters.ecs-service-name >> 
          skip_task_definition_registration: true
          force_new_deployment: true
          profile_name: << pipeline.parameters.aws-oidc-profile-name >>

  verify-ecs-deployment:
    docker:
      - image: cimg/python:3.10.4
    resource_class: small
    steps:
      - checkout
      - aws-auth-setup
      - run:
          name: Fetch latest ECS task-definition arn
          command: |
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition ecs_demo_task --output text --query 'taskDefinition.taskDefinitionArn' --profile << pipeline.parameters.aws-oidc-profile-name >>)
            echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> $BASH_ENV
      - aws-ecs/verify_revision_is_deployed:
          cluster: << pipeline.parameters.ecs-cluster-name >>
          family: << pipeline.parameters.ecs-family-name >>
          service_name: << pipeline.parameters.ecs-service-name >>
          profile_name: << pipeline.parameters.aws-oidc-profile-name >>
          task_definition_arn: ${TASK_DEFINITION_ARN}
  
  build-dev-env:
    executor: tf-docker
    steps:
      - checkout
      - aws-cli/setup:
          region: << pipeline.parameters.aws-default-region >>
          profile_name: << pipeline.parameters.aws-oidc-role >> 
          role_arn: << pipeline.parameters.aws-oidc-role >>
          role_session_name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
      - run:
          name: Run terraform plan and apply
          no_output_timeout: 3h
          command: |
               cd dev-env
               terraform init -input=false
               terraform plan -out tfapply
               terraform apply -auto-approve tfapply
      - run:
          name: Run terraform destroy
          no_output_timeout: 3h
          command: |
              cd dev-env
              terraform plan -destroy -out tfapply
              terraform apply -destroy -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  dev-env-test:
    when:
      and:
        - equal: [true, << pipeline.parameters.use-aws-orbs >>]
    jobs:
      - build-dev-env
  docker-workflow:
    when: 
      and: 
       - equal: [true, << pipeline.parameters.use-aws-orbs >>]
    jobs:
      - build-image-test
  ecs-workflow:
    when: 
      and: 
       - equal: [false, << pipeline.parameters.use-aws-orbs >>]
    jobs:
      - build-and-push-image
      - generate-task-definition-config:
           requires:
              - build-and-push-image
      - deploy-ecs:
           requires:
              - generate-task-definition-config
      - verify-ecs-deployment:
           requires:
              - deploy-ecs
